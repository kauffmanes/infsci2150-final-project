/**
 * CipherServer.java
 * Authors: Emily Kauffman & Jeffrey James
 * IS2150, Spring 2018, University of Pittsburgh
 * 
 * Question Two: In this part of the assignment, the client program CipherClient should (1) generate a DES key and stores the key in a file, (2) encrypts the given
 * String object using that key and sends the encrypted object over the socket to the server. The server program CipherServer then uses the key that was previously
 * generated by the client to decrypt the incoming object. The server obtains the key by reading it from the same file that the client previously generated. The
 * server should then print out the decypted message. For this part of the assignment, you will need to consult external sources and documentations on how to
 * generate   a DES key, write to or read from a file, and perform encryption/decryption of an object.
 * 
 * References:
 * 
 * TODO
 * Fix encoding issues - decode and encode using same algorithm
 * 
 */
import java.util.*;
import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import javax.xml.bind.DatatypeConverter;

public class CipherServer {

    private static SecretKey loadKey (String filename) throws Exception {

        String keyString;
        Scanner scan = new Scanner(new File(filename));
        
        scan.useDelimiter("\\A");
        keyString = scan.next();
        scan.close();

        byte[] decodedKey = Base64.getMimeDecoder().decode(keyString);
        
        return new SecretKeySpec(decodedKey, 0, decodedKey.length, "DES");

    }

    private static String decryptMessage (String data, SecretKey key) throws Exception {

        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
        cipher.init(Cipher.DECRYPT_MODE, key);

        byte[] message = data.getBytes();
        String decryptedMessage = new String(cipher.doFinal(message));

        return decryptedMessage;
    }

    public static void main (String[] args) throws Exception {

        int port = 7999;
        ServerSocket sock = new ServerSocket(port);

        System.out.println("Waiting for connections...");

        Socket client = sock.accept();
        ObjectInputStream inStream = new ObjectInputStream(client.getInputStream());
    
        String data = (String)inStream.readObject();

        sock.close();

        System.out.println("encrypted message:" + data); //prints decrypted data

        // Reads DES key from the same file Client created
        SecretKey key = loadKey("id_des");
        
        // Decrypts an incoming message using the key
        String decryptedMessage = decryptMessage(data, key);
        
        // Prints the decrypted message
        System.out.println("decrypted message: " + decryptedMessage);
        
    }
}